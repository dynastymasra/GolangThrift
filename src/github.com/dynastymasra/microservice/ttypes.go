// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package microservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - ID
//  - Firstname
//  - Lastname
//  - Email
//  - Age
//  - Active
type Person struct {
	ID        int32   `thrift:"id,1,required" json:"id"`
	Firstname string  `thrift:"firstname,2,required" json:"firstname"`
	Lastname  *string `thrift:"lastname,3" json:"lastname,omitempty"`
	Email     *string `thrift:"email,4" json:"email,omitempty"`
	Age       int16   `thrift:"age,5,required" json:"age"`
	Active    bool    `thrift:"active,6,required" json:"active"`
}

func NewPerson() *Person {
	return &Person{}
}

func (p *Person) GetID() int32 {
	return p.ID
}

func (p *Person) GetFirstname() string {
	return p.Firstname
}

var Person_Lastname_DEFAULT string

func (p *Person) GetLastname() string {
	if !p.IsSetLastname() {
		return Person_Lastname_DEFAULT
	}
	return *p.Lastname
}

var Person_Email_DEFAULT string

func (p *Person) GetEmail() string {
	if !p.IsSetEmail() {
		return Person_Email_DEFAULT
	}
	return *p.Email
}

func (p *Person) GetAge() int16 {
	return p.Age
}

func (p *Person) GetActive() bool {
	return p.Active
}
func (p *Person) IsSetLastname() bool {
	return p.Lastname != nil
}

func (p *Person) IsSetEmail() bool {
	return p.Email != nil
}

func (p *Person) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetFirstname bool = false
	var issetAge bool = false
	var issetActive bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetFirstname = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetAge = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetActive = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetFirstname {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Firstname is not set"))
	}
	if !issetAge {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Age is not set"))
	}
	if !issetActive {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Active is not set"))
	}
	return nil
}

func (p *Person) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Person) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Firstname = v
	}
	return nil
}

func (p *Person) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Lastname = &v
	}
	return nil
}

func (p *Person) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *Person) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Age = v
	}
	return nil
}

func (p *Person) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Active = v
	}
	return nil
}

func (p *Person) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Person"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Person) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Person) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("firstname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Firstname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.firstname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstname: ", p), err)
	}
	return err
}

func (p *Person) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastname() {
		if err := oprot.WriteFieldBegin("lastname", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Lastname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastname (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastname: ", p), err)
		}
	}
	return err
}

func (p *Person) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err)
		}
	}
	return err
}

func (p *Person) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("age", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:age: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Age)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.age (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:age: ", p), err)
	}
	return err
}

func (p *Person) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("active", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:active: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Active)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.active (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:active: ", p), err)
	}
	return err
}

func (p *Person) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Person(%+v)", *p)
}
